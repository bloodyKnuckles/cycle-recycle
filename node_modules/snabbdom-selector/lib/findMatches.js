"use strict";
var language_1 = require('./language');
var parent_symbol_1 = require('./parent-symbol');
function findMatches(cssSelector, vNode) {
    var selector = language_1.language(cssSelector);
    var matches = [];
    traverseVNode(vNode, addParent); // add mapping to the parent selectorParser
    traverseVNode(vNode, function (currentNode) {
        var data = currentNode.data;
        var result;
        if (data && data.fn) {
            if (Array.isArray(data.args)) {
                result = selector(data.fn.apply(null, data.args));
            }
            else if (data.args) {
                result = selector(data.fn.call(null, data.args));
            }
            else {
                result = selector(data.fn());
            }
        }
        else {
            result = selector(currentNode);
        }
        if (result) {
            if (!Array.isArray(result)) {
                result = [result];
            }
            matches.push.apply(matches, result);
        }
    });
    return matches;
}
exports.findMatches = findMatches;
function traverseVNode(vNode, f) {
    function recurse(currentNode, isParent, parentVNode) {
        var length = currentNode.children && currentNode.children.length || 0;
        for (var i = 0; i < length; ++i) {
            var children = currentNode.children;
            if (children && children[i] && typeof children[i] !== 'string') {
                var child = children[i];
                recurse(child, false, currentNode);
            }
        }
        f(currentNode, isParent, isParent ? void 0 : parentVNode);
    }
    recurse(vNode, true);
}
function addParent(vNode, isParent, parent) {
    if (isParent) {
        return void 0;
    }
    if (!vNode.data) {
        vNode.data = {};
    }
    if (!vNode.data[parent_symbol_1.default]) {
        Object.defineProperty(vNode.data, parent_symbol_1.default, {
            value: parent,
        });
    }
}
//# sourceMappingURL=findMatches.js.map